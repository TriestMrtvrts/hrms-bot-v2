import os
import requests
import json
import threading
from flask import Flask, request
from flask_cors import CORS
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========

BOT_TOKEN      = os.getenv("BOT_TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")
# =================================

app = Flask(__name__)
CORS(app)  # —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å fetch –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞

# –í –ø–∞–º—è—Ç–∏
subscribers  = set()
leads        = {}   # lead_id ‚Üí {name,phone,taken_by,taker_name,result}
msg_map      = {}   # lead_id ‚Üí {chat_id: message_id}
lead_counter = 0

ASK_RESULT = range(1)


# ‚Äî‚Äî Telegram handlers ‚Äî‚Äî
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤—å:\n"
        "/auth <–∫–ª—é—á-–ø–∞—Ä–æ–ª—å>"
    )

async def auth(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    args    = ctx.args
    if len(args) != 1 or args[0] != ADMIN_PASSWORD:
        return await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    if chat_id in subscribers:
        return await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    subscribers.add(chat_id)
    await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ó–∞—è–≤–∫–∏ –±—É–¥—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")

async def take_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query   = update.callback_query
    await query.answer()
    lead_id = int(query.data.split("|")[1])
    lead    = leads[lead_id]

    if lead["taken_by"] is not None:
        return await query.answer("üö´ –£–∂–µ –≤–∑—è—Ç–æ.", show_alert=True)

    lead["taken_by"]   = query.from_user.id
    lead["taker_name"] = query.from_user.full_name

    for cid, mid in msg_map[lead_id].items():
        await ctx.bot.edit_message_reply_markup(chat_id=cid, message_id=mid, reply_markup=None)

    ctx.user_data["current_lead"] = lead_id
    await ctx.bot.send_message(
        chat_id=query.from_user.id,
        text="‚úèÔ∏è –í—ã –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–∑–≤–æ–Ω–∞:"
    )
    return ASK_RESULT

async def save_result(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lead_id = ctx.user_data["current_lead"]
    text    = update.message.text
    lead    = leads[lead_id]
    lead["result"] = text

    for cid, mid in msg_map[lead_id].items():
        new_text = (
            f"üìû –ó–∞—è–≤–∫–∞ #{lead_id}\n"
            f"–ò–º—è: {lead['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {lead['phone']}\n"
            f"–í–∑—è–ª: {lead['taker_name']}\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {lead['result']}"
        )
        await ctx.bot.edit_message_text(chat_id=cid, message_id=mid, text=new_text)

    await update.message.reply_text("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    return ConversationHandler.END

async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# ‚Äî‚Äî Flask endpoint ‚Äî‚Äî
@app.route("/submit", methods=["POST"])
def submit():
    global lead_counter
    data = request.get_json()
    name  = data.get("name")
    phone = data.get("phone")

    # –ù–æ–≤—ã–π ID
    lead_id = lead_counter
    lead_counter += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
    leads[lead_id] = {
        "name": name, "phone": phone,
        "taken_by": None, "taker_name": None, "result": None
    }
    msg_map[lead_id] = {}

    # –®–ª—ë–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —á–µ—Ä–µ–∑ HTTP-API
    for chat_id in subscribers:
        text = f"üìû –ó–∞—è–≤–∫–∞ #{lead_id}\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        reply_markup = {
            "inline_keyboard": [
                [ { "text": "‚úÖ –í–∑—è—Ç—å", "callback_data": f"take|{lead_id}" } ]
            ]
        }
        resp = requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json={
                "chat_id": chat_id,
                "text": text,
                "reply_markup": json.dumps(reply_markup)
            }
        )
        result = resp.json().get("result", {})
        msg_id = result.get("message_id")
        if msg_id:
            msg_map[lead_id][chat_id] = msg_id

    return {"status": "ok"}


def main():
    # 1) –°–æ–∑–¥–∞—ë–º Telegram Application (–∏ –±–µ—Ä—ë–º —É –Ω–µ–≥–æ bot)
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    app.bot    = application.bot

    # 2) –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–µ
    threading.Thread(
        target=lambda: app.run(
            host="0.0.0.0",
            port=int(os.environ.get("PORT", 8000))
        ),
        daemon=True
    ).start()

    # 3) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ application
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("auth", auth))

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(take_callback, pattern=r"^take\|\d+$")],
        states={ ASK_RESULT: [ MessageHandler(filters.TEXT & ~filters.COMMAND, save_result) ] },
        fallbacks=[ CommandHandler("cancel", cancel) ]
    )
    application.add_handler(conv)

    # 4) –°—Ç–∞—Ä—Ç—É–µ–º polling
    application.run_polling()

if __name__ == "__main__":
    main()
